; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = src
include_dir = src
test_dir = src/library/test
default_envs = ESP32CoreTest, RP2040CoreTest, GS, Tracker, LoRa

[env]
framework = arduino
monitor_speed = 115200
; upload_speed = 115200
build_src_filter =
  +<**>
  -<**/main.cpp>
  -<**/wcpp/cpp/build/**>
  -<**/components/breakout/**>
  -<**/components/GPS/**>

[env:esp32]
platform = espressif32
board = esp32-s3-devkitc-1
board_upload.flash_size = 16MB
board_upload.before_reset = usb_reset
build_unflags = 
  -std=gnu++11 
  -DARDUINO_RUNNING_CORE
build_flags = 
  -std=gnu++14
  -Wall
	-DARDUINO_USB_CDC_ON_BOOT=1
  -DCORE_DEBUG_LEVEL=4
  -DARDUINO_RUNNING_CORE=0
lib_deps =
  git@github.com:collin80/can_common.git
  git@github.com:collin80/esp32_can.git
build_src_filter =
  ${env.build_src_filter} 
  -<library/driver/rp2040>
  -<library/test/>

[env:rp2040]
; platform = raspberrypi
platform = https://github.com/maxgerhardt/platform-raspberrypi.git
board = pico
board_build.core = earlephilhower
build_unflags = -std=gnu++11
build_flags = 
  -std=gnu++14
  -Wall
  -DDEBUG_RP2040_PORT=Serial
  -DDEBUG_RP2040_CORE
lib_deps =
  git@github.com:KevinOConnor/can2040.git
build_src_filter =
  ${env.build_src_filter} 
  -<library/driver/esp32>
  -<library/test/>

[env:native]
platform = native
framework = 
test_build_src = true
build_src_filter =
  -<**>
  +<library/kernel/heap.cpp>
  +<library/kernel/patricia_tri_tree.cpp>
build_unflags = 
  -std=gnu++11 
build_flags = 
  -std=gnu++14
  -g 
  -Wall
test_testing_command = 
  ${platformio.build_dir}/${this.__env__}/program 
  -vvv

[env:ESP32CoreTest]
platform = ${env:esp32.platform} 
board = ${env:esp32.board} 
board_upload.flash_size = ${env:esp32.board_upload.flash_size}
board_upload.before_reset = ${env:esp32.board_upload.before_reset}
build_unflags = ${env:esp32.build_unflags} 
build_flags = ${env:esp32.build_flags} 
lib_deps = ${env:esp32.lib_deps}
build_src_filter =
  ${env:esp32.build_src_filter}
  +<modules/ESP32CoreTest/main.cpp>

[env:RP2040CoreTest]
platform = ${env:rp2040.platform} 
board = ${env:rp2040.board} 
board_build.core = ${env:rp2040.board_build.core}
board_build.filesystem_size = 0.5m
build_unflags = ${env:rp2040.build_unflags}
build_flags = ${env:rp2040.build_flags}
lib_deps = ${env:rp2040.lib_deps}
build_src_filter =
  ${env:rp2040.build_src_filter}
  +<modules/RP2040CoreTest/main.cpp>

[env:GS]
platform = ${env:esp32.platform} 
board = ${env:esp32.board} 
board_upload.flash_size = ${env:esp32.board_upload.flash_size}
board_upload.before_reset = ${env:esp32.board_upload.before_reset}
build_unflags = ${env:esp32.build_unflags} 
build_flags = ${env:esp32.build_flags} 
lib_deps = ${env:esp32.lib_deps}
build_src_filter =
  ${env:esp32.build_src_filter}
  +<modules/GS/main.cpp>

[env:Tracker]
platform = ${env:esp32.platform} 
board = ${env:esp32.board} 
board_upload.flash_size = ${env:esp32.board_upload.flash_size}
board_upload.before_reset = ${env:esp32.board_upload.before_reset}
build_unflags = ${env:esp32.build_unflags} 
build_flags = ${env:esp32.build_flags} 
lib_deps = ${env:esp32.lib_deps}
build_src_filter =
  ${env:esp32.build_src_filter}
  +<modules/Tracker/main.cpp>

[env:LoRa]
platform = ${env:rp2040.platform} 
board = ${env:rp2040.board} 
board_build.core = ${env:rp2040.board_build.core}
board_build.filesystem_size = 0.5m
build_unflags = ${env:rp2040.build_unflags}
build_flags = ${env:rp2040.build_flags}
lib_deps =  ${env:rp2040.lib_deps}
build_src_filter =
  ${env:rp2040.build_src_filter}
  +<modules/LoRa/main.cpp>